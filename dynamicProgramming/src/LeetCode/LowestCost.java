package LeetCode;

import java.util.Arrays;

/**
 * 在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。
 * 在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。
 * 火车票有三种不同的销售方式：
 * 一张为期一天的通行证售价为 costs[0] 美元；
 * 一张为期七天的通行证售价为 costs[1] 美元；
 * 一张为期三十天的通行证售价为 costs[2] 美元。
 * 通行证允许数天无限制的旅行。
 * 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。
 * 返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。
 * <p>
 * 示例 1：
 * 输入：days = [1,4,6,7,8,20], costs = [2,7,15]
 * 输出：11
 * 解释：
 * 例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
 * 在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。
 * 在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。
 * 在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。
 * 你总共花了 $11，并完成了你计划的每一天旅行。
 * 示例 2：
 * 输入：days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
 * 输出：17
 * 解释：
 * 例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
 * 在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。
 * 在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。
 * 你总共花了 $17，并完成了你计划的每一天旅行。
 *  
 * 提示：
 * 1 <= days.length <= 365
 * 1 <= days[i] <= 365
 * days 按顺序严格递增
 * costs.length == 3
 * 1 <= costs[i] <= 1000
 */
public class LowestCost {
    public static void main(String[] args) {
        int[] days = {1, 4, 6, 7, 8, 20};
        int[] costs = {2, 7, 15};
        System.out.println(new LowestCost().mincostTickets(days, costs));
    }

    /**
     * 思路：动态规划，开一个大数组，长度为从第一天开始到包含最长旅游天数的区间
     * 1 每个位置的状态表示从第一天到现在旅行的最小花费
     * 2 由于需要旅行的天数之间存在间隔，因此每次计算完当天的状态后需要对间隔的区间进行值填充
     * 3 给数组额外长度加30相当于在第一天之前补零，这样可以统一每个位置比较7天前和30天前的状态转移结果
     * 4 每个位置的结果为{1天前的状态+cost[0]，7天前的状态+cost[1]，30天前的状态+cost[2]}三者中的最小值
     * 5 最终返回旅行最后一天的花费状态
     */
    public int mincostTickets(int[] days, int[] costs) {
        int[] dp = new int[days[days.length - 1] + 1 + 30];
        for (int i = 0; i < days.length; i++) {
            dp[days[i] + 30] = dp[days[i] - 1 + 30] + costs[0];
            dp[days[i] + 30] = Math.min(dp[days[i] + 30], dp[days[i] - 7 + 30] + costs[1]);
            dp[days[i] + 30] = Math.min(dp[days[i] + 30], dp[days[i] - 30 + 30] + costs[2]);
            if (i + 1 < days.length)
                Arrays.fill(dp, days[i] + 1 + 30, days[i + 1] + 30, dp[days[i] + 30]);
        }
        return dp[days[days.length - 1] + 30];
    }
}
