package LeetCode;

import java.util.*;

/**
 * 假设有打乱顺序的一群人站成一个队列。
 * 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。
 * 编写一个算法来重建这个队列。
 * <p>
 * 注意：
 * 总人数少于1100人。
 * <p>
 * 示例
 * 输入:
 * [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
 * 输出:
 * [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
 */
public class RebuildList {
    public static void main(String[] args) {
        int[][] people = {
                {7, 0},
                {4, 4},
                {7, 1},
                {5, 0},
                {6, 1},
                {5, 2},
        };
        people = new RebuildList().reconstructQueue(people);
        for (int[] e : people)
            System.out.println(e[0] + "," + e[1]);
    }

    /**
     * 思路：逆向插入排序
     * 身高从高到低排序的好处是，对于前面已经排好的队：
     * 1.如果下一个人(h,k)比前面所有人都矮，那么，他插入队列的k处，使其达到k的要求，对其他人没影响，达到要求！
     * 2.如果下一个人跟之前排好队的人中最矮的身高一样，这时候，就体现为什么之前排序时候，先考虑身高，再按照k的升序了，
     *      这时候，新来的人虽然与之前最矮之人身高一样，但是由于他的k比之前最矮的人的k都大，
     *      所以，他插入的地方一定在已经排好队的，和他身高一样的，最矮之人的后面，对这些最矮人们没有影响，
     *      当然，对其他比他高的人就更没有影响了。
     *
     * 其只要了解一点：我们一个一个地排队，对于前面已经排好的队，
     *      如果我们在k的位置插入一个新人，那么对k之前的人没有任何影响，对于k之后比新人高的人也没有任何影响，
     *      因此，我们每插入一个人的时候，要么保证前面所有人都比新人高，要么至少保证插入的位置后面的所有人都比新人高。
     */
    public int[][] reconstructQueue(int[][] people) {
//        先按身高顺序排序再按k逆序排序
        Arrays.sort(people, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        LinkedList<int[]> list = new LinkedList<>();
//        逆序插入，即按身高从高到低插入，相同身高的人按k值从小到大插入
        for (int i = people.length - 1; i >= 0; i--)
//            每次插入的距离即为k值
            list.add(people[i][1], people[i]);
        return list.toArray(new int[people.length][2]);
    }
}
